################################################################################
# System Bootstrap
# Wil Moore III <wil.moore@wilmoore.com>
# 
# Tasks:
#
#  - install dotfiles from `github.com/wilmoore/dotfiles`
#  - install homebrew
#  - install core utilities via homebrew
#  - install version managers for programming languages
#  - install programming languages
# 
# This is meant to be invoked via:
# bash < <(curl -s https://raw.github.com/wilmoore/system/master/setup)
################################################################################

set -e

################################################################################
# output functions
################################################################################

say () {
  printf "\r [ \033[00;34m..\033[0m ] $1\n"
}

ask () {
  printf "\r [ \033[0;33m??\033[0m ] $1\n"
}

pass () {
  printf "\r\033[2K [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

################################################################################
# install dotfiles from `github.com/wilmoore/dotfiles`
################################################################################

bash < <(curl -s https://raw.github.com/wilmoore/dotfiles/master/setup)

################################################################################
# install homebrew
################################################################################

#
# install homebrew
# see: http://ascarter.net/2010/02/22/homebrew-for-os-x.html
#

function install_homebrew() {
  HOMEBREW_PREFIX=$HOME/.homebrew

  test -d $HOMEBREW_PREFIX && say "homebrew was previously installed, nothing to do." && return 0

  mkdir -p $HOMEBREW_PREFIX

  curl -#L http://github.com/mxcl/homebrew/tarball/master | tar xz --strip 1 -C $HOMEBREW_PREFIX || return 1

  sudo sh -c "echo '$HOMEBREW_PREFIX/bin'       > /etc/paths.d/homebrew"    || return 1
  sudo sh -c "echo '$HOMEBREW_PREFIX/share/man' > /etc/manpaths.d/homebrew" || return 1

  export PATH="$HOMEBREW_PREFIX/bin:$PATH"

  brew update
  brew upgrade

  return $?
}

say "About to install homebrew"
install_homebrew || fail "Unable to install homebrew"
pass "homebrew install successful"

################################################################################
# install core tools via homebrew
################################################################################

say "Installing ag for better code search"
  brew install ag

say "Installing tree for viewing directory hierarchies"
  brew install tree

say "Installing wget"
  brew install wget

say "Installing git"
  brew install git

say "Installing vim"
  brew install vim macvim

say "Installing ctags, to index files for vim tab completion of methods, classes, variables ..."
  brew install ctags

say "Installing tmux, to save project state and switch between projects ..."
  brew install tmux

say "Installing reattach-to-user-namespace, for copy-paste and RubyMotion compatibility with tmux ..."
  brew install reattach-to-user-namespace

say "Installing watch, to execute a program periodically and show the output ..."
  brew install watch
  
say "Installing chruby and ruby-install, to install rubies"
  brew install ruby-build chruby
  ruby-build 2.0.0-p247 ~/.rubies/2.0.0-p247

################################################################################
# install programming languages (nvm + node)
################################################################################

say "Preparing to install nvm (Node.js version manager)"

NVM_ROOT=$HOME/.nvm

if [[ -d $NVM_ROOT ]]; then
  say "nvm seems to have been previously installed...preparing to update!"
  
  cd $NVM_ROOT
  
  git pull 2>/dev/null
  
  if [[ $? ]]; then
    pass "nvm updated succesfully"
  else
    fail "failed to update ($NVM_ROOT)"
  fi
  
else
  git clone https://github.com/creationix/nvm.git $NVM_ROOT 2>/dev/null
  
  if [[ $? ]]; then
    pass "installed succesfully"
  else
    fail "failed to install nvm to ($NVM_ROOT)"
  fi

  say "In order to load nvm, you'll need to add 'source $NVM_ROOT/nvm.sh' to your shell profile"
    
  if [[ -f $NVM_ROOT/nvm.sh ]]; then
    say "Preparing to install latest version of node"
  
    source $NVM_ROOT/nvm.sh
  
    LATEST_NODE=$(nvm ls-remote | tail -1)
    
    nvm install $LATEST_NODE
    
    say "Making Node version the default"
    
    nvm alias default $LATEST_NODE
    nvm use default
  fi
fi


# this is where we should likely branch on operating system (OSX vs Linux/Ubuntu) (see cowboy's setup for this)

# https://developer.apple.com/downloads/index.action
# https://itunes.apple.com/us/app/xcode/id497799835

# https://help.github.com/articles/set-up-git#password-caching

# say "we are going to do something"
# ask "we just finished doing something"
# pass "doing something was a success"
# fail "we are done"

